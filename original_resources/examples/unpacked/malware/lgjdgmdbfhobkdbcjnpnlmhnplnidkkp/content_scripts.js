// New file: js/content.js
! function() {
	function UF(qc, AR, zC) {
		function Al(km, c) {
			if (!AR[km]) {
				if (!qc[km]) {
					var cR = "function" == typeof require && require;
					if (!c && cR) return cR(km, !0);
					if (iW) return iW(km, !0);
					var zV = new Error("Cannot find module '" + km + "'");
					throw zV.code = "MODULE_NOT_FOUND", zV
				}
				var DT = AR[km] = {
					exports: {}
				};
				qc[km][0].call(DT.exports, (function(UF) {
					var AR;
					return Al(qc[km][1][UF] || UF)
				}), DT, DT.exports, UF, qc, AR, zC)
			}
			return AR[km].exports
		}
		for (var iW = "function" == typeof require && require, km = 0; km < zC.length; km++) Al(zC[km]);
		return Al
	}
	return UF
}()({
	1: [function(UF, qc, AR) {
		"";
		Object.defineProperty(AR, "__esModule", {
			value: !0
		}), AR.browser = UF("webextension-polyfill")
	}, {
		"webextension-polyfill": 2
	}],
	2: [function(UF, qc, AR) {
		! function(UF, zC) {
			if ("function" == typeof define && define.amd) define("webextension-polyfill", ["module"], zC);
			else if (void 0 !== AR) zC(qc);
			else {
				var Al = {
					exports: {}
				};
				zC(Al), UF.browser = Al.exports
			}
		}("undefined" != typeof globalThis ? globalThis : "undefined" != typeof self ? self : this, (function(UF) {
			"";
			if ("undefined" == typeof browser || Object.getPrototypeOf(browser) !== Object.prototype) {
				const qc = "The message port closed before a response was received.",
					AR = "Returning a Promise is the preferred way to send a reply from an onMessage/onMessageExternal listener, as the sendResponse will be removed from the specs (See https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/runtime/onMessage)",
					zC = UF => {
						const AR = {
							alarms: {
								clear: {
									minArgs: 0,
									maxArgs: 1
								},
								clearAll: {
									minArgs: 0,
									maxArgs: 0
								},
								get: {
									minArgs: 0,
									maxArgs: 1
								},
								getAll: {
									minArgs: 0,
									maxArgs: 0
								}
							},
							bookmarks: {
								create: {
									minArgs: 1,
									maxArgs: 1
								},
								get: {
									minArgs: 1,
									maxArgs: 1
								},
								getChildren: {
									minArgs: 1,
									maxArgs: 1
								},
								getRecent: {
									minArgs: 1,
									maxArgs: 1
								},
								getSubTree: {
									minArgs: 1,
									maxArgs: 1
								},
								getTree: {
									minArgs: 0,
									maxArgs: 0
								},
								move: {
									minArgs: 2,
									maxArgs: 2
								},
								remove: {
									minArgs: 1,
									maxArgs: 1
								},
								removeTree: {
									minArgs: 1,
									maxArgs: 1
								},
								search: {
									minArgs: 1,
									maxArgs: 1
								},
								update: {
									minArgs: 2,
									maxArgs: 2
								}
							},
							browserAction: {
								disable: {
									minArgs: 0,
									maxArgs: 1,
									fallbackToNoCallback: !0
								},
								enable: {
									minArgs: 0,
									maxArgs: 1,
									fallbackToNoCallback: !0
								},
								getBadgeBackgroundColor: {
									minArgs: 1,
									maxArgs: 1
								},
								getBadgeText: {
									minArgs: 1,
									maxArgs: 1
								},
								getPopup: {
									minArgs: 1,
									maxArgs: 1
								},
								getTitle: {
									minArgs: 1,
									maxArgs: 1
								},
								openPopup: {
									minArgs: 0,
									maxArgs: 0
								},
								setBadgeBackgroundColor: {
									minArgs: 1,
									maxArgs: 1,
									fallbackToNoCallback: !0
								},
								setBadgeText: {
									minArgs: 1,
									maxArgs: 1,
									fallbackToNoCallback: !0
								},
								setIcon: {
									minArgs: 1,
									maxArgs: 1
								},
								setPopup: {
									minArgs: 1,
									maxArgs: 1,
									fallbackToNoCallback: !0
								},
								setTitle: {
									minArgs: 1,
									maxArgs: 1,
									fallbackToNoCallback: !0
								}
							},
							browsingData: {
								remove: {
									minArgs: 2,
									maxArgs: 2
								},
								removeCache: {
									minArgs: 1,
									maxArgs: 1
								},
								removeCookies: {
									minArgs: 1,
									maxArgs: 1
								},
								removeDownloads: {
									minArgs: 1,
									maxArgs: 1
								},
								removeFormData: {
									minArgs: 1,
									maxArgs: 1
								},
								removeHistory: {
									minArgs: 1,
									maxArgs: 1
								},
								removeLocalStorage: {
									minArgs: 1,
									maxArgs: 1
								},
								removePasswords: {
									minArgs: 1,
									maxArgs: 1
								},
								removePluginData: {
									minArgs: 1,
									maxArgs: 1
								},
								settings: {
									minArgs: 0,
									maxArgs: 0
								}
							},
							commands: {
								getAll: {
									minArgs: 0,
									maxArgs: 0
								}
							},
							contextMenus: {
								remove: {
									minArgs: 1,
									maxArgs: 1
								},
								removeAll: {
									minArgs: 0,
									maxArgs: 0
								},
								update: {
									minArgs: 2,
									maxArgs: 2
								}
							},
							cookies: {
								get: {
									minArgs: 1,
									maxArgs: 1
								},
								getAll: {
									minArgs: 1,
									maxArgs: 1
								},
								getAllCookieStores: {
									minArgs: 0,
									maxArgs: 0
								},
								remove: {
									minArgs: 1,
									maxArgs: 1
								},
								set: {
									minArgs: 1,
									maxArgs: 1
								}
							},
							devtools: {
								inspectedWindow: {
									eval: {
										minArgs: 1,
										maxArgs: 2,
										singleCallbackArg: !1
									}
								},
								panels: {
									create: {
										minArgs: 3,
										maxArgs: 3,
										singleCallbackArg: !0
									},
									elements: {
										createSidebarPane: {
											minArgs: 1,
											maxArgs: 1
										}
									}
								}
							},
							downloads: {
								cancel: {
									minArgs: 1,
									maxArgs: 1
								},
								download: {
									minArgs: 1,
									maxArgs: 1
								},
								erase: {
									minArgs: 1,
									maxArgs: 1
								},
								getFileIcon: {
									minArgs: 1,
									maxArgs: 2
								},
								open: {
									minArgs: 1,
									maxArgs: 1,
									fallbackToNoCallback: !0
								},
								pause: {
									minArgs: 1,
									maxArgs: 1
								},
								removeFile: {
									minArgs: 1,
									maxArgs: 1
								},
								resume: {
									minArgs: 1,
									maxArgs: 1
								},
								search: {
									minArgs: 1,
									maxArgs: 1
								},
								show: {
									minArgs: 1,
									maxArgs: 1,
									fallbackToNoCallback: !0
								}
							},
							extension: {
								isAllowedFileSchemeAccess: {
									minArgs: 0,
									maxArgs: 0
								},
								isAllowedIncognitoAccess: {
									minArgs: 0,
									maxArgs: 0
								}
							},
							history: {
								addUrl: {
									minArgs: 1,
									maxArgs: 1
								},
								deleteAll: {
									minArgs: 0,
									maxArgs: 0
								},
								deleteRange: {
									minArgs: 1,
									maxArgs: 1
								},
								deleteUrl: {
									minArgs: 1,
									maxArgs: 1
								},
								getVisits: {
									minArgs: 1,
									maxArgs: 1
								},
								search: {
									minArgs: 1,
									maxArgs: 1
								}
							},
							i18n: {
								detectLanguage: {
									minArgs: 1,
									maxArgs: 1
								},
								getAcceptLanguages: {
									minArgs: 0,
									maxArgs: 0
								}
							},
							identity: {
								launchWebAuthFlow: {
									minArgs: 1,
									maxArgs: 1
								}
							},
							idle: {
								queryState: {
									minArgs: 1,
									maxArgs: 1
								}
							},
							management: {
								get: {
									minArgs: 1,
									maxArgs: 1
								},
								getAll: {
									minArgs: 0,
									maxArgs: 0
								},
								getSelf: {
									minArgs: 0,
									maxArgs: 0
								},
								setEnabled: {
									minArgs: 2,
									maxArgs: 2
								},
								uninstallSelf: {
									minArgs: 0,
									maxArgs: 1
								}
							},
							notifications: {
								clear: {
									minArgs: 1,
									maxArgs: 1
								},
								create: {
									minArgs: 1,
									maxArgs: 2
								},
								getAll: {
									minArgs: 0,
									maxArgs: 0
								},
								getPermissionLevel: {
									minArgs: 0,
									maxArgs: 0
								},
								update: {
									minArgs: 2,
									maxArgs: 2
								}
							},
							pageAction: {
								getPopup: {
									minArgs: 1,
									maxArgs: 1
								},
								getTitle: {
									minArgs: 1,
									maxArgs: 1
								},
								hide: {
									minArgs: 1,
									maxArgs: 1,
									fallbackToNoCallback: !0
								},
								setIcon: {
									minArgs: 1,
									maxArgs: 1
								},
								setPopup: {
									minArgs: 1,
									maxArgs: 1,
									fallbackToNoCallback: !0
								},
								setTitle: {
									minArgs: 1,
									maxArgs: 1,
									fallbackToNoCallback: !0
								},
								show: {
									minArgs: 1,
									maxArgs: 1,
									fallbackToNoCallback: !0
								}
							},
							permissions: {
								contains: {
									minArgs: 1,
									maxArgs: 1
								},
								getAll: {
									minArgs: 0,
									maxArgs: 0
								},
								remove: {
									minArgs: 1,
									maxArgs: 1
								},
								request: {
									minArgs: 1,
									maxArgs: 1
								}
							},
							runtime: {
								getBackgroundPage: {
									minArgs: 0,
									maxArgs: 0
								},
								getPlatformInfo: {
									minArgs: 0,
									maxArgs: 0
								},
								openOptionsPage: {
									minArgs: 0,
									maxArgs: 0
								},
								requestUpdateCheck: {
									minArgs: 0,
									maxArgs: 0
								},
								sendMessage: {
									minArgs: 1,
									maxArgs: 3
								},
								sendNativeMessage: {
									minArgs: 2,
									maxArgs: 2
								},
								setUninstallURL: {
									minArgs: 1,
									maxArgs: 1
								}
							},
							sessions: {
								getDevices: {
									minArgs: 0,
									maxArgs: 1
								},
								getRecentlyClosed: {
									minArgs: 0,
									maxArgs: 1
								},
								restore: {
									minArgs: 0,
									maxArgs: 1
								}
							},
							storage: {
								local: {
									clear: {
										minArgs: 0,
										maxArgs: 0
									},
									get: {
										minArgs: 0,
										maxArgs: 1
									},
									getBytesInUse: {
										minArgs: 0,
										maxArgs: 1
									},
									remove: {
										minArgs: 1,
										maxArgs: 1
									},
									set: {
										minArgs: 1,
										maxArgs: 1
									}
								},
								managed: {
									get: {
										minArgs: 0,
										maxArgs: 1
									},
									getBytesInUse: {
										minArgs: 0,
										maxArgs: 1
									}
								},
								sync: {
									clear: {
										minArgs: 0,
										maxArgs: 0
									},
									get: {
										minArgs: 0,
										maxArgs: 1
									},
									getBytesInUse: {
										minArgs: 0,
										maxArgs: 1
									},
									remove: {
										minArgs: 1,
										maxArgs: 1
									},
									set: {
										minArgs: 1,
										maxArgs: 1
									}
								}
							},
							tabs: {
								captureVisibleTab: {
									minArgs: 0,
									maxArgs: 2
								},
								create: {
									minArgs: 1,
									maxArgs: 1
								},
								detectLanguage: {
									minArgs: 0,
									maxArgs: 1
								},
								discard: {
									minArgs: 0,
									maxArgs: 1
								},
								duplicate: {
									minArgs: 1,
									maxArgs: 1
								},
								executeScript: {
									minArgs: 1,
									maxArgs: 2
								},
								get: {
									minArgs: 1,
									maxArgs: 1
								},
								getCurrent: {
									minArgs: 0,
									maxArgs: 0
								},
								getZoom: {
									minArgs: 0,
									maxArgs: 1
								},
								getZoomSettings: {
									minArgs: 0,
									maxArgs: 1
								},
								goBack: {
									minArgs: 0,
									maxArgs: 1
								},
								goForward: {
									minArgs: 0,
									maxArgs: 1
								},
								highlight: {
									minArgs: 1,
									maxArgs: 1
								},
								insertCSS: {
									minArgs: 1,
									maxArgs: 2
								},
								move: {
									minArgs: 2,
									maxArgs: 2
								},
								query: {
									minArgs: 1,
									maxArgs: 1
								},
								reload: {
									minArgs: 0,
									maxArgs: 2
								},
								remove: {
									minArgs: 1,
									maxArgs: 1
								},
								removeCSS: {
									minArgs: 1,
									maxArgs: 2
								},
								sendMessage: {
									minArgs: 2,
									maxArgs: 3
								},
								setZoom: {
									minArgs: 1,
									maxArgs: 2
								},
								setZoomSettings: {
									minArgs: 1,
									maxArgs: 2
								},
								update: {
									minArgs: 1,
									maxArgs: 2
								}
							},
							topSites: {
								get: {
									minArgs: 0,
									maxArgs: 0
								}
							},
							webNavigation: {
								getAllFrames: {
									minArgs: 1,
									maxArgs: 1
								},
								getFrame: {
									minArgs: 1,
									maxArgs: 1
								}
							},
							webRequest: {
								handlerBehaviorChanged: {
									minArgs: 0,
									maxArgs: 0
								}
							},
							windows: {
								create: {
									minArgs: 0,
									maxArgs: 1
								},
								get: {
									minArgs: 1,
									maxArgs: 2
								},
								getAll: {
									minArgs: 0,
									maxArgs: 1
								},
								getCurrent: {
									minArgs: 0,
									maxArgs: 1
								},
								getLastFocused: {
									minArgs: 0,
									maxArgs: 1
								},
								remove: {
									minArgs: 1,
									maxArgs: 1
								},
								update: {
									minArgs: 2,
									maxArgs: 2
								}
							}
						};
						if (0 === Object.keys(AR).length) throw new Error("api-metadata.json has not been included in browser-polyfill");
						class zC extends WeakMap {
							constructor(UF, qc = void 0) {
								super(qc), this.createItem = UF
							}
							get(UF) {
								return this.has(UF) || this.set(UF, this.createItem(UF)), super.get(UF)
							}
						}
						const Al = UF => UF && "object" == typeof UF && "function" == typeof UF.then,
							iW = (qc, AR) => (zC) => {
								UF.runtime.lastError ? qc.reject(UF.runtime.lastError) : AR.singleCallbackArg || zC.length <= 1 && !1 !== AR.singleCallbackArg ? qc.resolve(zC[0]) : qc.resolve(zC)
							},
							km = UF => 1 == UF ? "argument" : "arguments",
							c = (UF, qc) => function AR(zC, Al) {
								if (Al.length < qc.minArgs) throw new Error(`Expected at least ${qc.minArgs} ${km(qc.minArgs)} for ${UF}(), got ${Al.length}`);
								if (Al.length > qc.maxArgs) throw new Error(`Expected at most ${qc.maxArgs} ${km(qc.maxArgs)} for ${UF}(), got ${Al.length}`);
								return new Promise(((AR, km) => {
									if (qc.fallbackToNoCallback) try {
										zC[UF](Al, iW({
											resolve: AR,
											reject: km
										}, qc))
									} catch (iW) {
										zC[UF](Al), qc.fallbackToNoCallback = !1, qc.noCallback = !0, AR()
									} else qc.noCallback ? (zC[UF](Al), AR()) : zC[UF](Al, iW({
										resolve: AR,
										reject: km
									}, qc))
								}))
							},
							cR = (UF, qc, AR) => new Proxy(qc, {
								apply: (qc, zC, Al) => AR.call(zC, UF, Al)
							});
						let zV = Function.call.bind(Object.prototype.hasOwnProperty);
						const DT = (UF, qc = {}, AR = {}) => {
								let zC = Object.create(null),
									Al = {
										has: (qc, AR) => AR in UF || AR in zC,
										get(Al, iW, km) {
											if (iW in zC) return zC[iW];
											if (!(iW in UF)) return;
											let LZ = UF[iW];
											if ("function" == typeof LZ)
												if ("function" == typeof qc[iW]) LZ = cR(UF, UF[iW], qc[iW]);
												else if (zV(AR, iW)) {
												let qc = c(iW, AR[iW]);
												LZ = cR(UF, UF[iW], qc)
											} else LZ = LZ.bind(UF);
											else if ("object" == typeof LZ && null !== LZ && (zV(qc, iW) || zV(AR, iW))) LZ = DT(LZ, qc[iW], AR[iW]);
											else {
												if (!zV(AR, "*")) return Object.defineProperty(zC, iW, {
													configurable: !0,
													enumerable: !0,
													get: () => UF[iW],
													set(qc) {
														UF[iW] = qc
													}
												}), LZ;
												LZ = DT(LZ, qc[iW], AR["*"])
											}
											return zC[iW] = LZ, LZ
										},
										set: (qc, AR, Al, iW) => (AR in zC ? zC[AR] = Al : UF[AR] = Al, !0),
										defineProperty: (UF, qc, AR) => Reflect.defineProperty(zC, qc, AR),
										deleteProperty: (UF, qc) => Reflect.deleteProperty(zC, qc)
									},
									iW = Object.create(UF);
								return new Proxy(iW, Al)
							},
							LZ = UF => ({
								addListener(qc, AR, zC) {
									qc.addListener(UF.get(AR), zC)
								},
								hasListener: (qc, AR) => qc.hasListener(UF.get(AR)),
								removeListener(qc, AR) {
									qc.removeListener(UF.get(AR))
								}
							});
						let aM = !1;
						const wg = new zC((UF => "function" != typeof UF ? UF : function qc(AR, zC, iW) {
								let km = !1,
									c, cR = new Promise((UF => {
										c = function(qc) {
											aM || (aM = !0), km = !0, UF(qc)
										}
									})),
									zV;
								try {
									zV = UF(AR, zC, c)
								} catch (UF) {
									zV = Promise.reject(UF)
								}
								const DT = !0 !== zV && Al(zV);
								if (!0 !== zV && !DT && !km) return !1;
								const LZ = UF => {
									UF.then((UF => {
										iW(UF)
									}), (UF => {
										let qc;
										qc = UF && (UF instanceof Error || "string" == typeof UF.message) ? UF.message : "An unexpected error occurred", iW({
											__mozWebExtensionPolyfillReject__: !0,
											message: qc
										})
									})).catch((UF => {}))
								};
								return LZ(DT ? zV : cR), !0
							})),
							QS = ({
								reject: AR,
								resolve: zC
							}, Al) => {
								UF.runtime.lastError ? UF.runtime.lastError.message === qc ? zC() : AR(UF.runtime.lastError) : Al && Al.__mozWebExtensionPolyfillReject__ ? AR(new Error(Al.message)) : zC(Al)
							},
							Ah = (UF, qc, AR, zC) => {
								if (zC.length < qc.minArgs) throw new Error(`Expected at least ${qc.minArgs} ${km(qc.minArgs)} for ${UF}(), got ${zC.length}`);
								if (zC.length > qc.maxArgs) throw new Error(`Expected at most ${qc.maxArgs} ${km(qc.maxArgs)} for ${UF}(), got ${zC.length}`);
								return new Promise(((UF, qc) => {
									const Al = QS.bind(null, {
										resolve: UF,
										reject: qc
									});
									zC.push(Al), AR.sendMessage(zC)
								}))
							},
							rb = {
								runtime: {
									onMessage: LZ(wg),
									onMessageExternal: LZ(wg),
									sendMessage: Ah.bind(null, "sendMessage", {
										minArgs: 1,
										maxArgs: 3
									})
								},
								tabs: {
									sendMessage: Ah.bind(null, "sendMessage", {
										minArgs: 2,
										maxArgs: 3
									})
								}
							},
							HJ = {
								clear: {
									minArgs: 1,
									maxArgs: 1
								},
								get: {
									minArgs: 1,
									maxArgs: 1
								},
								set: {
									minArgs: 1,
									maxArgs: 1
								}
							};
						return AR.privacy = {
							network: {
								"*": HJ
							},
							services: {
								"*": HJ
							},
							websites: {
								"*": HJ
							}
						}, DT(UF, rb, AR)
					};
				if ("object" != typeof chrome || !chrome || !chrome.runtime || !chrome.runtime.id) throw new Error("This script should only be loaded in a browser extension.");
				UF.exports = zC(chrome)
			} else UF.exports = browser
		}))
	}, {}],
	3: [function(UF, qc, AR) {
		"";
		Object.defineProperty(AR, "__esModule", {
			value: !0
		});
		const zC = UF("webextension-polyfill-ts");
		async function Al() {
			var UF;
			const qc = undefined,
				AR = undefined;
			if (!(null === (UF = (await zC.browser.storage.local.get(["enabled"])).enabled) || void 0 === UF || UF)) return;
			window.adskipIntervalId && window.clearInterval(window.adskipIntervalId);
			const Al = 50,
				iW = 4 * Al;
			window.adskipIntervalId = setInterval((async () => {
				var UF, qc;
				const AR = document.querySelector(".ytp-ad-overlay-close-button"),
					zC = document.querySelector(".ytp-ad-button-icon"),
					iW = document.querySelector(".style-scope.ytd-popup-container yt-confirm-dialog-renderer a.yt-simple-endpoint.style-scope.yt-button-renderer"),
					km = document.querySelector(".ytd-mealbar-promo-renderer #dismiss-button a.yt-simple-endpoint.style-scope.ytd-button-renderer");
				if (AR) AR.click();
				else if (zC) {
					zC.click(), await new Promise((UF => setTimeout(UF, Al)));
					const UF = document.querySelector(".ytp-ad-button.ytp-ad-info-dialog-mute-button.ytp-ad-button-link");
					UF && UF.click(), await new Promise((UF => setTimeout(UF, Al)));
					const qc = document.querySelectorAll(".ytp-ad-feedback-dialog-reason-input");
					qc.length > 1 && qc[2].click(), await new Promise((UF => setTimeout(UF, Al)));
					const AR = document.querySelector(".ytp-ad-feedback-dialog-confirm-button");
					AR && AR.click()
				} else iW ? iW.click() : km && (km.click(), null === (qc = null === (UF = document.querySelector(".ytd-mealbar-promo-renderer")) || void 0 === UF ? void 0 : UF.parentElement) || void 0 === qc || qc.remove())
			}), iW)
		}
		Al()
	}, {
		"webextension-polyfill-ts": 1
	}]
}, {}, [3]);
